---
title: "ETL Step 3 - Tidy data"
date: "`r Sys.time()`"
output: html_document
---

This notebook tidies the raw *raw_data_table* from the *Content DB* database. The tidy data is written back to the *Content DB* database to the *bike_model_data* table.

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 

library(dplyr)
library(lubridate)

# The following packages are not directly called, but are requirements. They
# need to be here so that `rsconnect::writeManifest` is able to capture them
# as a dependency.
library(dbplyr)
```

## Get data from database

Connect to *Content DB* to get the *bike_raw_data* table.

```{r, get_data_from_db}
con <- odbc::dbConnect(odbc::odbc(), "Content DB", timeout = 10)
bike_raw_data <- tbl(con, "bike_raw_data")

glimpse(bike_raw_data)
```

Connect to RStudio Connect to get the *bike_station_info* from the pin.

```{r}
board <- pins::board_rsconnect("envvar", server = "https://colorado.rstudio.com/rsc")

bike_station_info_pin <- board %>%
  pins::pin_read("sam.edwardes/bike-predict-r-station-info-pinned")

glimpse(bike_station_info_pin)
```

Write the station info to *Content DB* so that it can perform a join between *bike_station_info* and *bike_raw_data*.

```{r}
if (odbc::dbExistsTable(con, "bike_station_info")) {
  odbc::dbRemoveTable(con, "bike_station_info")
}

odbc::dbWriteTable(
  con, 
  "bike_station_info", 
  bike_station_info_pin,
  overwrite = TRUE
)

bike_station_info <- tbl(con, "bike_station_info")
glimpse(bike_station_info)
```

## Tidy the data

Apply the data tidying steps. All of the tidying steps are performed in SQL. The results are written back to *Content DB* to the *bike_model_data* table.

```{r clean_data}
if (odbc::dbExistsTable(con, "bike_model_data")) {
  odbc::dbRemoveTable(con, "bike_model_data")
}

query <- bike_raw_data %>% 
    group_by(
        id = station_id, 
        hour = hour(time), 
        date = date(time), 
        month = month(time), 
        dow = TRIM(to_char(time, "Day"))
    ) %>%
    summarize(
        n_bikes = mean(num_bikes_available, na.rm = TRUE),
        .groups = "drop"
    ) %>%
    inner_join(
        select(bike_station_info, id = station_id, lat, lon)
    ) %>%
    dbplyr::sql_render() %>%
    stringr::str_replace("SELECT", "CREATE TABLE bike_model_data AS SELECT")

odbc::dbSendQuery(con, query)
tbl(con, "bike_model_data")
```

```{r}
odbc::dbDisconnect(con)
```
