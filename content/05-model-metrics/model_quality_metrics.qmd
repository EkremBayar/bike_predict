---
title: "Score New Data- Quarto Version"
author: "Gagandeep Singh"
date: "`r Sys.time()`"
output: html_document
---

This report runs after the new data has been cleansed. The report pulls the cleaned data and loads the latest trained model, and then scores the data with the new model, over-writing any previous model scores.

```{r}
library(magrittr)
library(bikeHelpR)
library(dbplyr)
library(dplyr)
library(xgboost)
library(yardstick)
library(tidymodels)
library(RPostgreSQL)
```


```{r}
con <- DBI::dbConnect(odbc::odbc(), "Content DB")
pins::board_register_rsconnect(server = Sys.getenv("CONNECT_SERVER"),
                               key = Sys.getenv("CONNECT_API_KEY"))
```

# Load model

```{r load_mod_and_data}
model_details <- pins::pin_get("bike_model_rxgb", board = "rsconnect")
model <- model_details$model
recipe <- model_details$recipe
train_date <- model_details$train_date
split_date <- model_details$split_date
```


# Score all data with model

```{r score}
all_days <- tbl(con, "bike_model_data") %>% 
  collect()

# prep and predict
predictions <- all_days %>% 
  bake(recipe, .) %>% 
  select(-id, -date, -n_bikes) %>% 
  as.matrix() %>% 
  predict(model, .)

results <- all_days %>% 
  transmute(
         id = id,
         hour = hour,
         date = date,
         preds = predictions,
         residuals = n_bikes - preds,
         actual = n_bikes,
         upload_time = Sys.time(),
         train_date = train_date,
         model = "rxgb"
  )
```

# Write predictions to database

```{r write_scores}
db_drop_table(con, "bike_pred_data", force = TRUE)

con2 <- DBI::dbConnect(
  RPostgres::Postgres(), 
  host = "soleng-content-rds1.cloiraotshw4.us-east-1.rds.amazonaws.com",
  dbname = "rds",
  user = Sys.getenv("CONTENT_DB_USER"),
  password = Sys.getenv("CONTENT_DB_PASS")
)
  
RPostgreSQL::dbWriteTable(con2, "bike_pred_data",results)

```

# Summarize model accuracy 

We summarize the model results based on three windows: the model's original training window (stored alongside the model in the `model_details` pin), the new "test" data that has arrived after the training window, the latest data from the last time this report ran.

## Training

```{r}
train_res <- results %>% 
  filter(date < split_date) 
oos_metrics(train_res$actual, train_res$preds)
```

## Test

```{r}
test_res <- results %>% 
  filter(date >= split_date) 
oos_metrics(test_res$actual, test_res$preds)
```

## Latest

```{r}
latest_day <- results %>% 
    slice_max(order_by = date, n=1, with_ties = FALSE) %>% 
    pull(date)
latest_res <- results %>% 
  filter(date == latest_day) 
oos_metrics(latest_res$actual, latest_res$preds)
```

```{r}
DBI::dbDisconnect(con)
RPostgreSQL::dbDisconnect(con2)
```
